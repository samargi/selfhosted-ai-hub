services:
  ollama:
    image: ollama/ollama:latest
    container_name: selfhosted-ai-hub-ollama-1
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
             - driver: nvidia
               count: 1
               capabilities: [gpu]
  caddy:
    image: caddy:2.7
    restart: unless-stopped
    volumes:
      - ./etc/caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    ports:
      - "443:443"
    environment:
      - DOMAIN=${DOMAIN}
      - N8N_HOST=${N8N_HOST}
    depends_on:
      - openwebui
      - n8n
      - qdrant
      - minio

  postgres:
    image: postgres:16
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-hub}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-hub}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  qdrant:
    image: qdrant/qdrant:latest
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data

  # One-shot job: copies image assets -> host folders if empty.
  seed-openwebui-assets:
    image: ghcr.io/open-webui/open-webui:main
    user: "0:0"                 # run seeder as root
    restart: "no"
    command: |
      sh -c '
      set -eu
      mkdir -p /host/build /host/backend-static

      if [ -f /app/build/index.html ]; then
        SRC_FRONT=/app/build
      elif [ -f /app/frontend/dist/index.html ]; then
        SRC_FRONT=/app/frontend/dist
      else
        echo "[seed][error] Could not locate frontend build (looked at /app/build and /app/frontend/dist)"
        exit 2
      fi
      echo "[seed] Using frontend source: $$SRC_FRONT"

      if [ -z "$$(ls -A /host/build 2>/dev/null || true)" ]; then
        echo "[seed] Seeding build -> /host/build"
        cp -a "$$SRC_FRONT/." /host/build/
      else
        echo "[seed] /host/build already present, skipping."
      fi

      if [ -z "$$(ls -A /host/backend-static 2>/dev/null || true)" ]; then
        if [ -d /app/backend/open_webui/static ]; then
          echo "[seed] Seeding static -> /host/backend-static"
          cp -a /app/backend/open_webui/static/. /host/backend-static/
        else
          echo "[seed][warn] /app/backend/open_webui/static not found, skipping static."
        fi
      else
        echo "[seed] /host/backend-static already present, skipping."
      fi
      '
    volumes:
      - ./etc/open-webui/build:/host/build
      - ./etc/open-webui/backend/static:/host/backend-static

  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      FRONTEND_BUILD_DIR=${FRONTEND_BUILD_DIR}
      STATIC_DIR=${STATIC_DIR}
      DATA_DIR=${DATA_DIR}
      PIPELINES_URLS=${PIPELINES_URLS}
      ENABLE_OPENAI_API=${ENABLE_OPENAI_API}
    volumes:
      - ./etc/open-webui/build:/app/build
      - ./etc/open-webui/backend/static:/app/backend/static
      - ./etc/open-webui/data:/app/backend/data
    depends_on:
      seed-openwebui-assets:
        condition: service_completed_successfully

  pipelines:
    image: ghcr.io/open-webui/pipelines:main
    restart: unless-stopped
    ports:
      - "9099:9099"
    volumes:
      - ./etc/pipelines/pipelines:/app/pipelines/
    environment:
      - PIPELINES_API_KEY=${PIPELINES_API_KEY}

  n8n:
    image: n8nio/n8n:latest
    restart: unless-stopped
    environment:
      N8N_DB_TYPE=${N8N_DB_TYPE}
      N8N_DB_POSTGRESDB_HOST=${N8N_DB_POSTGRESDB_HOST}
      N8N_DB_POSTGRESDB_PORT=${N8N_DB_POSTGRESDB_PORT}
      N8N_DB_POSTGRESDB_DATABASE=${N8N_DB_POSTGRESDB_DATABASE}
      N8N_DB_POSTGRESDB_USER=${N8N_DB_POSTGRESDB_USER}
      N8N_DB_POSTGRESDB_PASSWORD=${N8N_DB_POSTGRESDB_USER}
      N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      N8N_HOST=${N8N_HOST}
      N8N_PORT=${N8N_PORT}
      N8N_PROTOCOL=${N8N_PROTOCOL}
      N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL}
      WEBHOOK_URL=${N8N_EDITOR_BASE_URL}
      N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE}
      GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      N8N_PROXY_HOPS=${N8N_PROXY_HOPS}
      N8N_TRUSTED_PROXIES=${N8N_TRUSTED_PROXIES}
      N8N_RUNNERS_ENABLED=${N8N_RUNNERS_ENABLED}
      N8N_BLOCK_ENV_ACCESS_IN_NODE=${N8N_BLOCK_ENV_ACCESS_IN_NODE}
      N8N_USER_MANAGEMENT_DISABLED=${N8N_USER_MANAGEMENT_DISABLED}
      N8N_USER_MANAGEMENT_EMAIL=${N8N_USER_MANAGEMENT_EMAIL}
      N8N_USER_MANAGEMENT_PASSWORD=${N8N_USER_MANAGEMENT_PASSWORD}
    depends_on:
      - postgres
    ports:
      - "5678:5678"     
    volumes:
      - n8n_data:/home/node/.n8n

  litellm:
    image: litellm/litellm:latest
    restart: unless-stopped
    volumes:
      - ./etc/litellm/config.yaml:/etc/litellm/config.yaml:ro
    ports:
      - "9090:4000"
    command: >
      --config /etc/litellm/config.yaml --detailed_debug

  redis:
    image: redis:latest
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  caddy_data:
  caddy_config:
  postgres_data:
  qdrant_data:
  minio_data:
  n8n_data:
  redis_data:
  ollama_data:
